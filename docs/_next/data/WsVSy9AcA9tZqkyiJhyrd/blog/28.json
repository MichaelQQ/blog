{"pageProps":{"id":"28","title":"從Javascript面試題目學習Equality comparisons","datetime":"2018-01-29T14:04:44.017Z","summary":"最近同事分享了一個#Stackoverflow 上看到的#Javascript 面試題目，原文作者在某間公司面試時，面試官問他 \"Is it ever possible that (a ==1 && ","content":"<p>最近同事分享了一個#Stackoverflow 上看到的#Javascript 面試題目，原文作者在某間公司面試時，面試官問他 \"Is it ever possible that (a ==1 &#x26;&#x26; a== 2 &#x26;&#x26; a==3) could evaluate to true, in JavaScript?\"\n<a href=\"https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true\">Stackoverflow原文網址</a></p>\n<p>剛開始看到題目時就覺得蠻有趣的，雖然說在實際情況下不太可能寫出這樣的程式碼(可能有寫過，自己沒發現)。\n為了方便觀察結果就把題目稍為改成下面這樣，想辦法讓console可以印出\"yo\"</p>\n<pre><code class=\"language-js\">if (a == 1 &#x26;&#x26; a == 2 &#x26;&#x26; a == 3) {\n  console.log('yo')\n}\n</code></pre>\n<p>首先，為了可以讓if-statement為true，有兩個可能的做法</p>\n<ol>\n<li>每次經過比較後，a的值會加1</li>\n<li>每次取出a的值後，a的值會加1</li>\n</ol>\n<p>根據<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using\">MDN上的表格</a>\nLoose equality comparison會根據兩個operand的type，先經過轉換之後在做比較。\n然後，題目中每次比較的operand B是Number type，所以可能的結果如下</p>\n<p>| Type of operand A | Undefined | Null  | Number  | String  | Boolean  | Object |\n| - | - | - | - | - | - | - |\n| result | false | false | A === B | ToNumber(A) === B | ToNumber(A) === B | ToPrimitive(A) == B |</p>\n<p>所以有 ToNumber和 ToPrimitive兩個可能改變a的方式，其中，ToNumber的做法類似於+a的方式轉換成Number，而 ToPrimitive則會呼叫 A.valueOf 和 A.toString</p>\n<p>所以我們只要在每次比較時呼叫的 valueOf或 toString 修改並回傳a的值就可以讓if statement為true\ncode如下：</p>\n<pre><code class=\"language-js\">var a = {\n  i: 1,\n  toString: function () {\n    return this.i++;\n  }\n}\n\nif (a == 1 &#x26;&#x26; a == 2 &#x26;&#x26; a == 3) {\n  console.log('yo')\n}\n\n// or\nvar b = {\n  i: 1,\n  valueOf: function () {\n    return this.i++;\n  }\n}\n\nif (b == 1 &#x26;&#x26; b == 2 &#x26;&#x26; b == 3) {\n  console.log('yo')\n}\n</code></pre>\n<p>這樣一來，每次比較時呼叫 toString或 valueOf就會回傳不同的值，讓if為true。</p>\n<p>另一種作法則是讓每次get a的值都會改變，所以在一開始宣告a時加上他的getter function，作法如下：</p>\n<pre><code class=\"language-js\">Object.defineProperty(window, 'a', {\n  get: (function () {\n    var i = 1\n    return function () {\n      return i++\n    }\n  })()\n})\n\nif (a == 1 &#x26;&#x26; a == 2 &#x26;&#x26; a == 3) {\n  console.log('yo')\n}\n</code></pre>\n<p>這邊我們為了在宣告a的時候同時定義他的getter function，我們使用Object.defineProperty來宣告a</p>\n<p>這樣就能讓if為true並印出結果。\n這題目看起來蠻有趣的，有很多種解法可以達到題目的要求，也讓我又再次了解Equality comparisons</p>\n<p>reference:</p>\n<p>[1] <a href=\"https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true\">Can (a ==1 &#x26;&#x26; a== 2 &#x26;&#x26; a==3) ever evaluate to true? - Stackoverflow</a></p>\n<p>[2] <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using\">Loose equality using ==</a></p>\n<p>[3] <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">\nObject.defineProperty()</a></p>\n"},"__N_SSG":true}