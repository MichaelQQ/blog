{"pageProps":{"id":"26","title":" Dockerize RoR webapp","datetime":"2017-11-27T12:19:40.542Z","summary":"(**This tutorial doesn't include Database setup and RoR development.**)\n\nCause we want to move our #","content":"<p>(<strong>This tutorial doesn't include Database setup and RoR development.</strong>)</p>\n<p>Cause we want to move our #RoR webapp to the other host, I decided to dockerize it. After dockerize our webapp, we could easily deploy it to any host. We use phusion/passenger to run our RoR webapp, therefore, I would use phusion/passenger #Docker image as our base image.</p>\n<h2>1. First, we need to create a Dockerfile as follow</h2>\n<pre><code class=\"language-Dockerfile\"># Base our image on phusion/passenger-ruby\nFROM phusion/passenger-ruby22\n\n# Set correct environment variables.\nENV HOME /root\nENV RAILS_ENV production\n\n# Use baseimage-docker's init process.\nCMD [\"/sbin/my_init\"]\n\n# Start Nginx / Passenger\nRUN rm -f /etc/service/nginx/down\n\n# Remove the default site\nRUN rm /etc/nginx/sites-enabled/default\n\n# Add the nginx site and config\nADD site.conf /etc/nginx/sites-enabled/site.conf\nADD custom_nginx.conf /etc/nginx/conf.d/custom_nginx.conf\nADD env.conf /etc/nginx/main.d/env.conf\n\n# Install bundle of gems\nWORKDIR /tmp\nADD ./myapp/Gemfile /tmp/\nADD ./myapp/Gemfile.lock /tmp/\nRUN bundle install\n\n# Add the Rails app\nADD ./myapp /home/app/myapp\n\nRUN chown -R app:app /home/app/myapp\n\n# Clean up APT when done.\nRUN apt-get clean &#x26;&#x26; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n</code></pre>\n<p>Choose your ruby version's docker image. We use ruby2.2 for our webapp here. <code>FROM phusion/passenger-ruby22</code> means our Docker image is base on phusion/passenger-ruby22. If your app need to config some environment variables, you could also set it in docker file. Also, we want to run #Nginx in our image, we sould add this line <code>RUN rm -f /etc/service/nginx/down</code> and add some nginx setting file to our image.</p>\n<pre><code># site.conf\nserver {\n\tlisten\t\t 80;\n\tserver_name  example.com;\n\n\tlocation ~ ^/example(/.*|$) {\n          alias /home/app/myapp;\n\t\t\t\t\tpassenger_base_uri /example;\n          passenger_app_root /home/app/myapp;\n          passenger_document_root /home/app/myapp/public;\n\t\t\t\t\tpassenger_enabled on;\n          access_log  logs/access.log  simple;\n        }\n}\n</code></pre>\n<p>If you need to customize your nginx setting, you could add conf file to <code>/etc/nginx/conf.d/</code>. Here, we define a simple log format.</p>\n<pre><code># custom_nginx.conf\nlog_format simple '[$time_local] \"$http_x_forwarded_for\"';\n</code></pre>\n<p>Don't forget your webapp's environment variables. For example, my webapp use some environment variables for DB info, I should add those in the env.conf file.</p>\n<blockquote>\n<p>By default Nginx clears all environment variables (except TZ) for its child processes (Passenger being one of them). That's why any environment variables you set with docker run -e, Docker linking and /etc/container_environment, won't reach Nginx.</p>\n</blockquote>\n<pre><code>env DB_ADAPTER;\nenv DB_DATABASE;\nenv DB_USER;\nenv DB_PASSWD;\nenv DB_HOST;\n</code></pre>\n<h2>2. Second, create docker image</h2>\n<p>Now, the file structure will like following</p>\n<pre><code>project1\n|- myapp/\n|- Dockerfile\n</code></pre>\n<p>In the root of project1 directory and create docker image.</p>\n<pre><code>docker image build -t [IMAGE_NAME] .\n</code></pre>\n<h2>3. publish docker iamge</h2>\n<p>After we create docker image correctly, we could publish it to docker hub. Also, if your docker image is private, you could publish to your private docker hub. If you don't have private docker hub, you could also make it as .tar file and share with others.</p>\n<pre><code># in your PC, compress your docker image to tar file\ndocker save [IMAGE_NAME] > [NAME].tar\n\n# in others' PC, import the docker image to your image list\ndocker load &#x3C; [name].tar\n</code></pre>\n<h2>4. Deploy it</h2>\n<p>After image created, we could run our docker container.</p>\n<pre><code># create and run a docker container named myapp and port mapping 3000(host):80(container)\n# (--rm means remove container after close)\ndocker run -p 3000:80 --rm --name myapp [IMAGE_NAME]\n</code></pre>\n<p>We need to access to our docker container and init our webapp db.</p>\n<pre><code># show docker container list\ndocker container ls\n\n# run bash in docker container\ndocker exec -t -i CONTAINER_ID bash\n\n# migrate rails db\nmyapp> rake db:migrate\n</code></pre>\n<h2>5. Try it by access in browser</h2>\n<p>open http://localhost:3000/example to check it.</p>\n<h1>possible issue</h1>\n<p>In this tutorial, when I tried to migrate db, there is an error as follow.</p>\n<blockquote>\n<p>Mysql2::Error: All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead</p>\n</blockquote>\n<p>Solve it by add config/initializers/abstract_mysql2_adapter.rb (cited <a href=\"https://stackoverflow.com/questions/40758226/mysql2error-all-parts-of-a-primary-key-must-be-not-null-if-you-need-null-in\">stackoverflow</a>)</p>\n<pre><code class=\"language-ruby\">require 'active_record/connection_adapters/mysql2_adapter'\n\nclass ActiveRecord::ConnectionAdapters::Mysql2Adapter\n  NATIVE_DATABASE_TYPES[:primary_key] = \"int(11) auto_increment PRIMARY KEY\"\nend\n</code></pre>\n<h1>reference</h1>\n<ul>\n<li><a href=\"https://github.com/phusion/passenger-docker\">phusion/passenger-docker</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40758226/mysql2error-all-parts-of-a-primary-key-must-be-not-null-if-you-need-null-in\">Mysql2::Error: All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead</a></li>\n</ul>\n"},"__N_SSG":true}