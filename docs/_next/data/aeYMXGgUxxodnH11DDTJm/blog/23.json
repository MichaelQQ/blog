{"pageProps":{"id":"23","title":"Javascript call by value","datetime":"2017-07-10T14:39:39.636Z","summary":"### Pass primitive type to function\n\nIn #Javascript , it always pass a copy of value to the function","content":"<h3>Pass primitive type to function</h3>\n<p>In #Javascript , it always pass a copy of value to the function. For example, we pass a variable <em><strong>one</strong></em>, which is Number type, to function <em><strong>changeNumberToTen</strong></em>. It copy the value of <em><strong>one</strong></em> variable, 10, then pass to the function.</p>\n<pre><code class=\"language-js\">function changeNumberToTen(num) {\n  num = 10;\n}\n\nvar one = 1;\nconsole.log(one);  // 1\n\nchangeNumberToTen(one);\nconsole.log(one);  // 1\n</code></pre>\n<p>In memory, it may look like below.</p>\n<p><img src=\"https://farm5.staticflickr.com/4283/35706196841_cca8f60b72.jpg\" alt=\"memory chart1\"></p>\n<p>The <em><strong>one</strong></em> variable’s reference is different from the function argument <em><strong>num</strong></em>. Though <em><strong>num</strong></em> change the value, it doesn’t change the <em><strong>one’s</strong></em> value.</p>\n<h3>Pass object to function —property change</h3>\n<p>What if we pass a object to a function and change it?\nWe pass <em><strong>objA</strong></em> to the function <em><strong>changeObject</strong></em> and the function change the property <em><strong>a</strong></em> of object. Doesn’t it pass by value? Why does <em><strong>objA</strong></em> change?</p>\n<pre><code class=\"language-js\">function changeObject(obj) {\n  obj.a = 10;\n}\n\nvar objA = { a: 5 };\n\nconsole.log(objA);  //  {a:5}\n\nchangeObject(objA);\nconsole.log(objA);  //  {a: 10}\n</code></pre>\n<p>In memory, it may look like below.</p>\n<p><img src=\"https://farm5.staticflickr.com/4264/35028668993_6c8b98a87f.jpg\" alt=\"memory chart2\"></p>\n<p>It’s still pass by value. The <em><strong>objA’s</strong></em> value is the object’s address and <em><strong>obj’s</strong></em> value is copy of object’s address. Both point to the same object. Therefore, when function <em><strong>changeObject</strong></em> change the property <em><strong>a</strong></em> of object, it affects the objA.</p>\n<h3>Pass object to function — fully change</h3>\n<p>What if we pass a object to the function and fully change it?\nWe pass <em><strong>objA</strong></em> to the function <em><strong>changeObject</strong></em> and the function fully change the object to Object({ b: 10 }). Why does <em><strong>objA</strong></em> un-change?</p>\n<pre><code class=\"language-js\">function changeObject(obj) {\n  obj = { b: 10 };\n}\n\nvar objA = { a: 5 };\n\nconsole.log(objA);  //  {a:5}\n\nchangeObject(objA);\nconsole.log(objA);  //  {a:5}\n</code></pre>\n<p>In memory, it may look like below.</p>\n<p><img src=\"https://farm5.staticflickr.com/4262/35706196511_ac21ecb80f.jpg\" alt=\"memory chart3\"></p>\n<p>Actually, it’s not a matter of pass by value here. So, why the <em><strong>objA</strong></em> doesn’t change? It’s because of <em><strong>reassignment</strong></em>. When we assign new value to a variable, it doesn’t change the existed value in variable but change the variable’s reference to new value. In the example, <em><strong>obj</strong></em> change its reference to the new value (Object(<em><strong>{b: 10}</strong></em>)’ s address) That’s why <em><strong>objA</strong></em> does not be affected.</p>\n<p>Array is also a object in Javascript, so it’ll perform the same result as object does.</p>\n<h3>Conclusion</h3>\n<p>In Javascript,</p>\n<ol>\n<li>Always #pass_by_value . (Someone call it pass by sharing when passing Object)</li>\n<li>#Assigning new value to variable is #reassignment.</li>\n</ol>\n<h3>Reference</h3>\n<ol>\n<li><a href=\"http://stackoverflow.com/a/6605700/5593461\">Javascript by reference vs. by value [duplicate] — nrabinowitz@StackOverflow</a></li>\n<li><a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy/\">ECMA-262–3 in detail. Chapter 8. Evaluation strategy. — Dmitry Soshnikov</a></li>\n<li><a href=\"http://www.slideshare.net/russel_05/javascript-variables-scope-and-memory-2\">Javascript — variables, scope, and memory — \nFarhan Faruque@SlideShare</a></li>\n</ol>\n"},"__N_SSG":true}