{"pageProps":{"posts":[{"id":"28","title":"從Javascript面試題目學習Equality comparisons","datetime":"2018-01-29T14:04:44.017Z","summary":"最近同事分享了一個#Stackoverflow 上看到的#Javascript 面試題目，原文作者在某間公司面試時，面試官問他 \"Is it ever possible that (a ==1 && ","content":"最近同事分享了一個#Stackoverflow 上看到的#Javascript 面試題目，原文作者在某間公司面試時，面試官問他 \"Is it ever possible that (a ==1 && a== 2 && a==3) could evaluate to true, in JavaScript?\"\n[Stackoverflow原文網址](https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true)\n\n剛開始看到題目時就覺得蠻有趣的，雖然說在實際情況下不太可能寫出這樣的程式碼(可能有寫過，自己沒發現)。\n為了方便觀察結果就把題目稍為改成下面這樣，想辦法讓console可以印出\"yo\"\n```js\nif (a == 1 && a == 2 && a == 3) {\n  console.log('yo')\n}\n```\n\n首先，為了可以讓if-statement為true，有兩個可能的做法\n1. 每次經過比較後，a的值會加1\n2. 每次取出a的值後，a的值會加1\n\n根據[MDN上的表格](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using)\nLoose equality comparison會根據兩個operand的type，先經過轉換之後在做比較。\n然後，題目中每次比較的operand B是Number type，所以可能的結果如下\n\n| Type of operand A | Undefined | Null  | Number  | String  | Boolean  | Object |\n| - | - | - | - | - | - | - |\n| result | false | false | A === B | ToNumber(A) === B | ToNumber(A) === B | ToPrimitive(A) == B |\n\n所以有 ToNumber和 ToPrimitive兩個可能改變a的方式，其中，ToNumber的做法類似於+a的方式轉換成Number，而 ToPrimitive則會呼叫 A.valueOf 和 A.toString\n\n所以我們只要在每次比較時呼叫的 valueOf或 toString 修改並回傳a的值就可以讓if statement為true\ncode如下：\n```js\nvar a = {\n  i: 1,\n  toString: function () {\n    return this.i++;\n  }\n}\n\nif (a == 1 && a == 2 && a == 3) {\n  console.log('yo')\n}\n\n// or\nvar b = {\n  i: 1,\n  valueOf: function () {\n    return this.i++;\n  }\n}\n\nif (b == 1 && b == 2 && b == 3) {\n  console.log('yo')\n}\n```\n\n這樣一來，每次比較時呼叫 toString或 valueOf就會回傳不同的值，讓if為true。\n\n另一種作法則是讓每次get a的值都會改變，所以在一開始宣告a時加上他的getter function，作法如下：\n```js\nObject.defineProperty(window, 'a', {\n  get: (function () {\n    var i = 1\n    return function () {\n      return i++\n    }\n  })()\n})\n\nif (a == 1 && a == 2 && a == 3) {\n  console.log('yo')\n}\n```\n這邊我們為了在宣告a的時候同時定義他的getter function，我們使用Object.defineProperty來宣告a\n\n這樣就能讓if為true並印出結果。\n這題目看起來蠻有趣的，有很多種解法可以達到題目的要求，也讓我又再次了解Equality comparisons\n\nreference:\n\n[1] [Can (a ==1 && a== 2 && a==3) ever evaluate to true? - Stackoverflow](https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true)\n\n[2] [Loose equality using ==](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using)\n\n[3] [\nObject.defineProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)"},{"id":"27","title":"Collaborating by git","datetime":"2017-11-28T11:42:51.362Z","summary":"When developing a project with others, there are some steps we should do before send pull request. L","content":"When developing a project with others, there are some steps we should do before send pull request. Like sync local branch with remote one, fix conflicts, etc. The following is a normal steps we will before sending pull request.\n\n## 1. First thing first, fork a project. \nNo matter which #git server you use, (GitHub, GitLab, Bitbucket, etc.) they all provide a easy way to fork a repo. After fork it, you would get a repo **[YOUR_NAME]/[PROJECT_NAME]**.\n\n## 2. Clone the repo and start coding\nclone the repo to local\n```sh\ngit clone [THE_REPO_URL]\n```\nAfter clone the repo, we could start coding. Before coding, don't forget to create a new branch for your new feature.\n```sh\ngit checkout -b [BRANCH_NAME]\n```\n\n## 3. Sync local master branch with original's master branch\nAfter developing the feature, the original repo, your remote repo and local repo would look like below\n```\n# Original Repo's master branch\nA - B - C - D\n\n# Your remote repo's master branch\nA - B - C\n\n# Your local repo's master and feature branch\nA - B - C\n         \\\n          a - b - c\n```\nThere may have some features developed by others have merged back to original repo. Before sending pull request, we should sync with it to make sure our revised doesn't have conflict with it.\n\n### 3.1 Add Original remote\nCause we cloned from our remote, we don't have original repo in our remote list. we should add remote repo for synchronizing with it.\n```sh\ngit remote add [ORIGINAL_REMOTE_REPO_NAME(ex. upstream)] [ORIGINAL_REMOTE_REPO_URL]\n```\n\n### 3.2 Fetch Original remote\nFetch the original master to local\n```sh\ngit fetch upstream master\n```\n\n### 3.3 Merge master branches\nBefore merge upstream/master branch to master branch, **make sure you are in master branch.**\n```sh\nIn Master Branch> git merge upstream/master\n```\n\n### 3.4 Rebase feature branch\n```\nA - B - C - D\n         \\\n          a - b - c\n```\nNow, our local repo branch would look like above. We should rebase feature branch (starting from C to starting from D). We should put rebase command in feature branch, also, it might have some conflicts when rebasing, it's time to fix it.\n```sh\nfeature branch> git rebase master\n```\nAfter we successfully rebase (fixed all conflicts), the branch would look like below.\n```\nA - B - C - D\n             \\\n              a - b - c\n```\n\n## 4. Push to remote and send a pull request\nIt's time to push our code and send pull request. It's easy to send pull request in git servers (Github, Gitlab, Bitbucket, etc.)\n```sh\ngit push [OUR_REMOTE]\n```\n\n# Reference\n- [Syncing a fork](https://help.github.com/articles/syncing-a-fork/)\n"},{"id":"26","title":" Dockerize RoR webapp","datetime":"2017-11-27T12:19:40.542Z","summary":"(**This tutorial doesn't include Database setup and RoR development.**)\n\nCause we want to move our #","content":"(**This tutorial doesn't include Database setup and RoR development.**)\n\nCause we want to move our #RoR webapp to the other host, I decided to dockerize it. After dockerize our webapp, we could easily deploy it to any host. We use phusion/passenger to run our RoR webapp, therefore, I would use phusion/passenger #Docker image as our base image. \n\n## 1. First, we need to create a Dockerfile as follow\n\n```Dockerfile\n# Base our image on phusion/passenger-ruby\nFROM phusion/passenger-ruby22\n\n# Set correct environment variables.\nENV HOME /root\nENV RAILS_ENV production\n\n# Use baseimage-docker's init process.\nCMD [\"/sbin/my_init\"]\n\n# Start Nginx / Passenger\nRUN rm -f /etc/service/nginx/down\n\n# Remove the default site\nRUN rm /etc/nginx/sites-enabled/default\n\n# Add the nginx site and config\nADD site.conf /etc/nginx/sites-enabled/site.conf\nADD custom_nginx.conf /etc/nginx/conf.d/custom_nginx.conf\nADD env.conf /etc/nginx/main.d/env.conf\n\n# Install bundle of gems\nWORKDIR /tmp\nADD ./myapp/Gemfile /tmp/\nADD ./myapp/Gemfile.lock /tmp/\nRUN bundle install\n\n# Add the Rails app\nADD ./myapp /home/app/myapp\n\nRUN chown -R app:app /home/app/myapp\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n```\n\nChoose your ruby version's docker image. We use ruby2.2 for our webapp here. `FROM phusion/passenger-ruby22` means our Docker image is base on phusion/passenger-ruby22. If your app need to config some environment variables, you could also set it in docker file. Also, we want to run #Nginx in our image, we sould add this line `RUN rm -f /etc/service/nginx/down` and add some nginx setting file to our image.\n\n```\n# site.conf\nserver {\n\tlisten\t\t 80;\n\tserver_name  example.com;\n\n\tlocation ~ ^/example(/.*|$) {\n          alias /home/app/myapp;\n\t\t\t\t\tpassenger_base_uri /example;\n          passenger_app_root /home/app/myapp;\n          passenger_document_root /home/app/myapp/public;\n\t\t\t\t\tpassenger_enabled on;\n          access_log  logs/access.log  simple;\n        }\n}\n```\n\nIf you need to customize your nginx setting, you could add conf file to `/etc/nginx/conf.d/`. Here, we define a simple log format.\n\n```\n# custom_nginx.conf\nlog_format simple '[$time_local] \"$http_x_forwarded_for\"';\n```\n\nDon't forget your webapp's environment variables. For example, my webapp use some environment variables for DB info, I should add those in the env.conf file.\n>By default Nginx clears all environment variables (except TZ) for its child processes (Passenger being one of them). That's why any environment variables you set with docker run -e, Docker linking and /etc/container_environment, won't reach Nginx.\n\n```\nenv DB_ADAPTER;\nenv DB_DATABASE;\nenv DB_USER;\nenv DB_PASSWD;\nenv DB_HOST;\n```\n\n## 2. Second, create docker image\n\nNow, the file structure will like following\n```\nproject1\n|- myapp/\n|- Dockerfile\n```\n\nIn the root of project1 directory and create docker image.\n```\ndocker image build -t [IMAGE_NAME] .\n```\n\n## 3. publish docker iamge\n\nAfter we create docker image correctly, we could publish it to docker hub. Also, if your docker image is private, you could publish to your private docker hub. If you don't have private docker hub, you could also make it as .tar file and share with others.\n\n```\n# in your PC, compress your docker image to tar file\ndocker save [IMAGE_NAME] > [NAME].tar\n\n# in others' PC, import the docker image to your image list\ndocker load < [name].tar\n```\n\n## 4. Deploy it\n\nAfter image created, we could run our docker container. \n```\n# create and run a docker container named myapp and port mapping 3000(host):80(container)\n# (--rm means remove container after close)\ndocker run -p 3000:80 --rm --name myapp [IMAGE_NAME]\n```\n\nWe need to access to our docker container and init our webapp db. \n```\n# show docker container list\ndocker container ls\n\n# run bash in docker container\ndocker exec -t -i CONTAINER_ID bash\n\n# migrate rails db\nmyapp> rake db:migrate\n```\n\n## 5. Try it by access in browser\nopen http://localhost:3000/example to check it.\n\n# possible issue\nIn this tutorial, when I tried to migrate db, there is an error as follow.\n> Mysql2::Error: All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead\n\nSolve it by add config/initializers/abstract_mysql2_adapter.rb (cited [stackoverflow](https://stackoverflow.com/questions/40758226/mysql2error-all-parts-of-a-primary-key-must-be-not-null-if-you-need-null-in))\n```ruby\nrequire 'active_record/connection_adapters/mysql2_adapter'\n\nclass ActiveRecord::ConnectionAdapters::Mysql2Adapter\n  NATIVE_DATABASE_TYPES[:primary_key] = \"int(11) auto_increment PRIMARY KEY\"\nend\n```\n\n# reference\n- [phusion/passenger-docker](https://github.com/phusion/passenger-docker)\n- [Mysql2::Error: All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead](https://stackoverflow.com/questions/40758226/mysql2error-all-parts-of-a-primary-key-must-be-not-null-if-you-need-null-in)\n"},{"id":"25","title":"5 JavaScript Books for good start","datetime":"2017-08-07T15:14:41.577Z","summary":"Here are some #JavaScript #books I've read and I think it would be a good for you when you are #lear","content":"Here are some #JavaScript #books I've read and I think it would be a good for you when you are #learning JavaScript.\n\nThe books list is\n1. [Eloquent JavaScript 2th edition - Marijn Haverbeke.](http://amzn.to/2vxfLGm)\n  - [Eloquent JavaScript online](http://eloquentjavascript.net/)\n\n  This is the first JavaScript book I read and do the exercises after every chapter. It include basic JavaScript syntax and DOM (Document Object Model) It is a great book for beginner to start learning JavaScript. \n\n2. [JavaScript: The Good Parts - Douglas Crockford](http://amzn.to/2veF2CH)\n  \n  This book deeply introduce JavaScript's types. Especially Function type, the book explains some conception which many programming confused in JavaScript. For example, it explain what is Function #Scope and #Closure . It would help you to clearly understand some JavaScript features.\n\n3. [JavaScript Patterns - Stoyan Stefanov](http://amzn.to/2fmhMif)\n\n  JavaScript Patterns introduce some #patterns which is usually used in JavaScript. Those patterns would easily to see in JavaScript libraries. Also, many patterns you've used in your codebase. It would make your code reuseable and easier to extend.\n\n4. [Programming JavaScript Applications - Eric Elliott](http://amzn.to/2vxG7bz)\n\n  After reading above three books, you might be fluently coding in JavaScript. It would be a good time to read this book to recap your JavaScript knowledges. The book help you recap your JavaScript concepts and it talk some technologies using in modern JavaScript Applications. You would learn many practical application technologies, like Restful APIs and Access control.\n\n5. [JavaScript Allongé - Reginald Braithwaite](http://amzn.to/2vcskWI)\n\n  #Functional Programming is now popular in JavaScript world. The popular Framework, #ReactJS , and one of its state manager, #Redux , make functional programming start catching developers eyes in JavaScript Community. Also, there are some popular libraries help you coding in functional way. For example, #underscore , #lodash and #ramda are libraries make you easier coding in functional way in #JS . This book would be a great book to lead you dig JavaScript in the other way. \n\n"},{"id":"24","title":"Free port in MAC","datetime":"2017-08-05T15:51:03.435Z","summary":"Sometimes, when we are developing a server #program ,  the #port may be occupied because we abnormal","content":"Sometimes, when we are developing a server #program ,  the #port may be occupied because we abnormally shut down our program.\nTherefore, we should find the process which is occupying the port and close it then the program work in the same port could work well.\n\nHere are the instructions to find and close the #process in #MAC \n1. find the port info\n```shell\n# lsof -i :PORT_NUMBER\n# for example the process in port 5566\nlsof -i :5566\n# output\nCOMMAND  PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME\nnode    5955 ...\n```\n2. kill the process in port 5566 via PID\n```shell\n#-9 means force kill\nkill -9 5955\n```\n\nAfter kill the process, you could execute the other program working in the same port number now.\n\n### Reference:\n- [How do I close an open port from the terminal on the Mac?](https://stackoverflow.com/questions/12397175/how-do-i-close-an-open-port-from-the-terminal-on-the-mac#17703016)\n\n"},{"id":"23","title":"Javascript call by value","datetime":"2017-07-10T14:39:39.636Z","summary":"### Pass primitive type to function\n\nIn #Javascript , it always pass a copy of value to the function","content":"### Pass primitive type to function\n\nIn #Javascript , it always pass a copy of value to the function. For example, we pass a variable ***one***, which is Number type, to function ***changeNumberToTen***. It copy the value of ***one*** variable, 10, then pass to the function.\n\n```js\nfunction changeNumberToTen(num) {\n  num = 10;\n}\n\nvar one = 1;\nconsole.log(one);  // 1\n\nchangeNumberToTen(one);\nconsole.log(one);  // 1\n```\n\nIn memory, it may look like below.\n\n![memory chart1](https://farm5.staticflickr.com/4283/35706196841_cca8f60b72.jpg)\n\nThe ***one*** variable’s reference is different from the function argument ***num***. Though ***num*** change the value, it doesn’t change the ***one’s*** value.\n\n### Pass object to function —property change\n\nWhat if we pass a object to a function and change it? \nWe pass ***objA*** to the function ***changeObject*** and the function change the property ***a*** of object. Doesn’t it pass by value? Why does ***objA*** change?\n\n```js\nfunction changeObject(obj) {\n  obj.a = 10;\n}\n\nvar objA = { a: 5 };\n\nconsole.log(objA);  //  {a:5}\n\nchangeObject(objA);\nconsole.log(objA);  //  {a: 10}\n```\n\nIn memory, it may look like below.\n\n![memory chart2](https://farm5.staticflickr.com/4264/35028668993_6c8b98a87f.jpg)\n\nIt’s still pass by value. The ***objA’s*** value is the object’s address and ***obj’s*** value is copy of object’s address. Both point to the same object. Therefore, when function ***changeObject*** change the property ***a*** of object, it affects the objA.\n\n### Pass object to function — fully change\n\nWhat if we pass a object to the function and fully change it?\nWe pass ***objA*** to the function ***changeObject*** and the function fully change the object to Object({ b: 10 }). Why does ***objA*** un-change?\n\n```js\nfunction changeObject(obj) {\n  obj = { b: 10 };\n}\n\nvar objA = { a: 5 };\n\nconsole.log(objA);  //  {a:5}\n\nchangeObject(objA);\nconsole.log(objA);  //  {a:5}\n```\n\nIn memory, it may look like below.\n\n![memory chart3](https://farm5.staticflickr.com/4262/35706196511_ac21ecb80f.jpg)\n\nActually, it’s not a matter of pass by value here. So, why the ***objA*** doesn’t change? It’s because of ***reassignment***. When we assign new value to a variable, it doesn’t change the existed value in variable but change the variable’s reference to new value. In the example, ***obj*** change its reference to the new value (Object(***{b: 10}***)’ s address) That’s why ***objA*** does not be affected. \n\nArray is also a object in Javascript, so it’ll perform the same result as object does.\n\n### Conclusion\n\nIn Javascript,\n1. Always #pass_by_value . (Someone call it pass by sharing when passing Object)\n2. #Assigning new value to variable is #reassignment.\n\n### Reference\n\n1. [Javascript by reference vs. by value [duplicate] — nrabinowitz@StackOverflow](http://stackoverflow.com/a/6605700/5593461)\n2. [ECMA-262–3 in detail. Chapter 8. Evaluation strategy. — Dmitry Soshnikov](http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy/)\n3. [Javascript — variables, scope, and memory — \nFarhan Faruque@SlideShare](http://www.slideshare.net/russel_05/javascript-variables-scope-and-memory-2)"},{"id":"22","title":"Object.create and Object.assign","datetime":"2017-07-10T13:42:37.449Z","summary":"先看一下#Object.create 和#Object.assign 在#MDN 的說明：\n\n>The Object.create() method creates a new object with","content":"先看一下#Object.create 和#Object.assign 在#MDN 的說明：\n\n>The Object.create() method creates a new object with the specified prototype object and properties.\n>\n>Syntax: Object.create(proto[, propertiesObject])\n>\n>— [Object.create() MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n>\n>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.\n>\n>Syntax: Object.assign(target, …sources)\n>\n>— [Object.assign() MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n換句話說就是\n- Object.create可以用來建立有特定#prototype 的#物件 \n- Object.assign可以用來複製多個物件的屬性到目標物件\n\n```js\nvar car = {\n  wheel: 3,\n  speed: () => console.log('fast')\n}\n\nvar car1 = Object.create(car)\nvar car2 = Object.create(car)\nvar car3 = Object.assign({}, car)\nvar car4 = Object.assign(car)\n\ncar1.speed()  // fast\ncar2.speed()  // fast\ncar3.speed()  // fast\ncar4.speed()  // fast\nconsole.log(car1) // {__proto__: {speed: (), wheel: 3}}\nconsole.log(car2) // {__proto__: {speed: (), wheel: 3}}\nconsole.log(car3) // {wheel: 3}\nconsole.log(car4) // {wheel: 3}\n\ncar.wheel = 2\ncar.speed = () => console.log('very fast')\n\ncar1.speed()  // very fast\ncar2.speed()  // very fast\ncar3.speed()  // fast\ncar4.speed()  // very fast\nconsole.log(car1) // {__proto__: {speed: (), wheel: 2}}\nconsole.log(car2) // {__proto__: {speed: (), wheel: 2}}\nconsole.log(car3) // {wheel: 3}\nconsole.log(car4) // {wheel: 2}\n```\n\n由上面的例子可以觀察\n1. car1 和 car2 皆由Object.create(car)所建立，所以兩者的prototype皆為car；所以在car修改wheel和speed後，兩者皆輸出very fast。\n\n2. car3 和 car4 使用Object.assign建立，其中car3的目標物件為一個新的物件，而car4的目標物件為car；所以當car被修改時car3不受影響，反之，car4則隨car的修改而改變。\n\n3. car1和car2對比car3的差異在於，使用Object.create所建立的物件為prototype指向car，而使用Object.assign所建立的物件則是直接將car的屬性值複製到目標物件中，如範例中的空物件。\n\n實際上執行上面的#code 時可能會觀察到奇怪的狀況，可以參考[A special output of Chrome console.log Object]()"},{"id":"21","title":"A special output of Chrome console.log Object","datetime":"2017-07-10T13:37:02.030Z","summary":"There is a surprise output in #chrome #console when I test Object.create demo.\n\nBelow is the #code \n","content":"There is a surprise output in #chrome #console when I test Object.create demo.\n\nBelow is the #code \n```js\nvar car = {\n  wheel: 3,\n  speed: () => console.log('fast')\n}\n\nvar car1 = Object.create(car)\nvar car2 = Object.create(car)\n\ncar1.speed()\ncar2.speed()\n\n/*\n  The output I expected.\n  car1: {\n    __proto__: {\n      wheel: 3,\n      speed: ()\n    }\n  }\n  car2: {\n    __proto__: {\n      wheel: 3,\n      speed: ()\n    }\n  }\n  \n  The actual output\n    car1: {\n    __proto__: {\n      wheel: 4,\n      speed: ()\n    }\n  }\n  car2: {\n    __proto__: {\n      wheel: 4,\n      speed: ()\n    }\n  }\n*/\nconsole.log(car1)\nconsole.log(car2)\n\ncar.wheel = 4\ncar.speed = () => console.log('very fast')\n\ncar1.speed()\ncar2.speed()\n\n/*\n  car1: {\n    __proto__: {\n      wheel: 4,\n      speed: ()\n    }\n  }\n  car2: {\n    __proto__: {\n      wheel: 4,\n      speed: ()\n    }\n  }\n*/\nconsole.log(car1)\nconsole.log(car2)\n```\n\nThe chrome console doesn’t show the #object details immediately. When I click to show the objects’ details, Chrome shows the objects’ detail at that time. In other words, the objects have been changed when I show the details.\n\nThere are few ways to solve it.\n1. JSON.stringify object when console.log\n2. set #breakpoint before object changed and check the value in #debugger at that time."},{"id":"20","title":"Send mail by Mailchimp","datetime":"2017-07-10T13:33:47.987Z","summary":">Mailchimp : [https://mailchimp.com/](https://mailchimp.com/)\n>\n>免費用戶\n>- 最多可以有2,000訂閱者\n>- 每月12,000封電","content":">Mailchimp : [https://mailchimp.com/](https://mailchimp.com/)\n>\n>免費用戶\n>- 最多可以有2,000訂閱者\n>- 每月12,000封電子郵件\n\n記錄一下用#Mailchimp 寄出確認郵件的步驟(html code)\n主要分為\n1. 建立#Email #Template\n2. 匯入user list\n3. 建立#campaign\n4. 寄出email\n---\n1. 前往Template建立新的郵件樣板\n\n2. 這裡我們打算自己編輯html，所以選擇Code your own -> Paste in code選項\n\n3. 然後修改成自己的Email#樣板 ，這裡我們只要Demo動態帶入使用者資料的做法，所以只留下一小部分(其中 *|NAME|*, *|PHONE|*和*|ADDRESS|*就是我們等等要動態帶入的部分)\n```html\n<body leftmargin=\"0\" marginwidth=\"0\" topmargin=\"0\" marginheight=\"0\" offset=\"0\">\n    <center>\n        <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" height=\"100%\" width=\"100%\" id=\"backgroundTable\">\n            <tr>\n                <td>姓名</td>\n                <td>*|NAME|*</td>\n            </tr>\n            <tr>\n                <td>電話</td>\n                <td>*|PHONE|*</td>\n            </tr>\n            <tr>\n                <td>地址</td>\n                <td>*|ADDRESS|*</td>\n            </tr>\n        </table>\n    </center>\n</body>\n```\n4. 儲存後，我們就完成樣板的部分了。\n---\n再來是匯入使用者的資料\n1. 建立List\n\n2. 匯入使用者資料 (選擇Add contacts -> import contacts)，可以根據自己的需求選擇用csv匯入或是從.xlsx(Excel)複製貼上，選擇好後按下右下角的Next\n\n3. 貼上從Excel複製的資料後，確認無誤的話會要你設定每個欄位的名稱。不需要的欄位可以選擇skip，需要的欄位可以選擇mailchimp提供的欄位設定或自行設定名稱後Save。\n\n4. 完成匯入後，要設定merge tag的名稱，確保寄出Email時可以動態的在我們的Email Template填入使用者的資料(選擇Settings -> List Fields and *|MERGE|* tages)\n將姓名、電話、住址的tag名稱改成我們在email template裡面的*|NAME|*, *|PHONE|*和*|ADDRESS|*後儲存。\n\n---\n最後則是寄出郵件的部分，分別是\n1. 建立Campaign\n2. 選擇要寄出的List\n3. 選擇Email Template\n4. 預覽結果\n建議要預覽一下結果確認資料有被帶入，可以選擇\nPreview and Test -> Enter Preview mode -> Enable live merge tag info\n5. 寄出郵件\n\n這樣就完成整個流程了！"},{"id":"19","title":"Fibonacci number","datetime":"2017-07-10T13:20:54.575Z","summary":"最近看的文章中，有兩篇[1][2]剛好都提到#Fibonacci_number ，其中一篇用了#DP 的做法，自己也試著推導一次，順便記錄下來。\n\n\n>Fibonacci number:\n>\n>0, ","content":"最近看的文章中，有兩篇[1][2]剛好都提到#Fibonacci_number ，其中一篇用了#DP 的做法，自己也試著推導一次，順便記錄下來。\n\n\n>Fibonacci number:\n>\n>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144…\n>\n>Fn = Fn-1 + Fn-2\n\n一開始看到 Fibonacci number 最直覺的做法就是用#Recursive\n\n#程式 碼如下：\n\n```javascript\nconst fib = n => {\n  if (n < 2) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\n//or\nconst fib = n => n < 2 ? 1 : fib(n - 1) + fib(n - 2);\n```\n\n這樣的做法在數字越大就會越來越慢，因為在計算的過程中，越小的數字會被重複計算越多次\n\n```\nfib(6)\n  |---fib(5)\n  |     |---fib(4)\n  |     |     |---fib(3)\n  |     |     |     |---fib(2)\n  |     |     |     |---fib(1)\n  |     |     |---fib(2)\n  |     |---fib(3)\n  |           |---fib(2)\n  |           |---fib(1)\n  |---fib(4)\n        |---fib(3)\n        |     |---fib(2)\n        |     |---fib(1)\n        |---fib(2)\n```\n\n以fib(6)為例\n- fib(5)算1次\n- fib(4)算2次\n- fib(3)算3次\n…\n\n所以在[1]的文中，作者的方法是讓Fibonacci function有cache機制。如果直接修改Fibonacci function的話可能會像這樣：\n\n```javascript\nlet m = {};\nconst fib = n => {\n  if (m[n]) {\n    return m[n];\n  }\n  if (n < 2) {\n    return 1;\n  }\n  m[n] = fib(n-1) + fib(n-2);\n  return m[n];\n}\n```\n可是我們並不想直接將cache機制加在Fibonacci function中，而是另外建立一個function，用途是將傳入的function變成有#cache 機制。\n但這裡作者指出另一個問題\n\n>\n>因為Fibonacci function是recursive，所以要確保return時呼叫的>Fibonacci function也是有cache機制的Fibonacci function。\n>\n\n[1]的回應部分有提到一種寫起來比較簡單的做法，但這裡，我想記錄一下用Y combinator做法的推導過程。\n\n>Used in this way the Y combinator implements simple recursion. In the lambda calculus it is not possible to refer to the definition of a function in a function body. Recursion may only be achieved by passing in a function as a parameter. The Y combinator demonstrates this style of programming.\n>\n>— [Wikipedia Fixed-point combinator](https://en.wikipedia.org/wiki/Fixed-point_combinator)\n\n首先，我們先將Fibonacci function做一點變形。\n\n```javascript\nconst afib = f => n => {\n  if (n < 2) {\n    return 1;\n  }\n  return f(n -1) + f(n - 2);\n}\n\n//or\nconst afib = f => n => n < 2 ? 1 : f(n - 1) + f(n - 2);\n```\n\n現在他已經不是一個真正Fibonacci function，但還保有其外觀。接下來我們需要個function可以讓變成真正的Fibonacci function，並且在其中加入cache機制。\n\n`const memoFib = makeMemoFib(afib);`\n\n```javascript\n// a function to create realFib function\nconst makeMemoFib = (f, m = {}) => {\n  const memoFib = (n) => {\n    if (m[n]) {\n      return m[n]\n    }\n    const fib = f(memoFib);\n    m[n] = fib(n);\n    return m[n];\n  };\n  return memoFib;\n};\n\n// simplify\nconst makeMemoFib = (f, m = {}) => {\n  const memoFib = (n) => {\n    if (m[n]) {\n      return m[n]\n    }\n    m[n] = f(memoFib)(n);\n    return m[n];\n  };\n  return memoFib;\n};\n```\n\n我們建立一個makeMemoFib的function，讓我們傳入被變形過的Fibonacci function，並且回傳一個有cache機制的Fibonacci function (memoFib)。\n\n為了滿足“In the lambda calculus it is not possible to refer to the definition of a function in a function body”，我們將makeMemoFib簡化，不用另外宣告一個fib。\n\n但是我們還是宣告了memoFib，所以我們還是需要再進一步簡化它，而可以幫助我們簡化的是：\n\n`memoFib = makeMemoFib(f, m);`\n\n```javascript\nconst makeMemoFib = (f, m = {}) => {\n  return (n) => {\n    if (m[n]) {\n      return m[n]\n    }\n    m[n] = f(makeMemoFib(f, m))(n);\n    return m[n];\n  };\n};\n```\n\n這樣已經完成大半了，我們在稍作整理一下\n\n```javascript\nconst makeMemoFib = (f, m = {}) => (n) => {\n  if (m[n]) {\n    return m[n]\n  }\n  m[n] = f(makeMemoFib(f, m))(n);\n  return m[n];\n};\n\n// simplify again\nconst makeMemoFib = (f, m = {}) => (n) => {\n  return m[n] ? m[n] : (m[n] = f(makeMemoFib(f, m))(n));\n};\n\n// one more\nconst makeMemoFib = (f, m = {}) => (n) => m[n] ? m[n] : (m[n] = f(makeMemoFib(f, m))(n));\n```\n現在我們已經簡化到只剩makeMemoFib，雖然這樣還不算是一個合格的Y combinator，但對我們來說已經夠用，接下來只要把我們變形過的afib丟進去，就可以得到一個有cache機制的Fibonacci function了\n\n`const memoFib = makeMemoFib(afib);`\n\n這樣做的過程還蠻像在算#數學 的，還可以試試算階層的function，也可以用類似的方法推導出來。\n\n[2]的話則是用了ES2015的 Generator function，內容也很精彩，做法就完全不一樣了。\n\nReference:\n\n- [1] [Functional 計算思維 — Recursion 與 DP  -  Ray Shih](https://medium.com/@rayshih771012/functional-%E8%A8%88%E7%AE%97%E6%80%9D%E7%B6%AD-recursion-%E8%88%87-dp-7ed4c28e0e32#.n97xutc3h)\n- [2] [7 Surprising Things I Learned Writing a Fibonacci Generator in JavaScript  - Eric Elliott](https://medium.com/javascript-scene/7-surprising-things-i-learned-writing-a-fibonacci-generator-4886a5c87710#.x6uig6qrq)\n- [3] [The Y Combinator explained with JavaScript](http://kestas.kuliukas.com/YCombinatorExplained/)\n\n"},{"id":"2","title":"CCU Ecourse Notifier - Ecourse FB通知器","datetime":"2017-07-04T14:48:11.871Z","summary":"在看完『[SITCON 2014] 當 PHP 與 Facebook API 相遇 - 聽。風』的talk之後，就一直很想試試#Facebook_API ；剛好，又對網路爬蟲 (#Crawler )非","content":"在看完『[SITCON 2014] 當 PHP 與 Facebook API 相遇 - 聽。風』的talk之後，就一直很想試試#Facebook_API ；剛好，又對網路爬蟲 (#Crawler )非常感興趣，這個Facebook App/Web就誕生了。\n\n\n\n不過要爬什麼資料可就傷透腦筋了，一直苦惱於要收集什麼資料，一天，學校的課程教學平台 (CCU #Ecourse )給了我靈感，自從課越修越少後，就越來越少登入教學平台了，也因此常常錯過課程的公告資訊，造成教學課程平台師生間資訊流通效果大打折扣。而#Facebook 可以算是同學之間使用者最多的社群網路了，如果可以讓公告在Facebook裡面產生通知，那資訊的流通程度就改善了許多。\n\n\n\n第一步就是先完成#爬蟲 程式了，一開始花了許多時間猶豫要使用何種程式語言實現，當時很想學學#Python ，所以就順便練練Python囉！整個爬蟲程式的從開始到完成其實遇到蠻多關卡的，所以也學到很多實務的知識，例如：\n\n- 透過瀏覽器實際去了解開啟網頁的流程\n- 了解HTTP協定的內容\n- HTML的解析\n- 網頁登入的細節\n\n在完成這部分後，不得不說Python不愧是現在非常流行的程式語言，在寫過C和Java後，真的會發現Python的開發可以專注在程式的邏輯，而且開發速度也可以快上許多，當然C和Java還是有其不可取代性。\n\n\n\n第二步就是將爬到的公告往Facebook送的部分了，所以要先研究Facebook API，不過在#SITCON的 影片中已經很清楚地講解API的使用方式，所以這個階段算是摸索得比較快，而且第一次使用Facebook API感覺蠻新鮮得。\n\n\n\n最後一步就是需要一個網頁介面讓大家輸入Ecourse的帳號密碼來爬個人的課程公告，並且要找尋可以爬蟲程式的地方，也就是有支援Python的Server，因為懶得自己架Server只好在網路上尋覓機器，最後找上#Google_App_Engine (#GAE )，GAE算是很適合放小巧的程式的地方，設定也蠻容易的。\n\n\n\n在這些努力之下，總算是把這個小專案完成，不過思考到要記錄Ecourse帳號密碼這種敏感性的資料，所以就沒有把他完整的放上來了，只剩下模擬Facebook通知的功能可以使用，算是小缺憾。另外，Facebook API提供的通知功能只限於網頁，因此也無法達成最初想要的即時的手機通知。\n\n\n\n最後附上CCU Ecourse Notifier給大家玩玩Facebook的通知功能：http://ecourse-notifier.appspot.com/ (已關閉)\n\n\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/dBS_K0oFxo8\" frameborder=\"0\" allowfullscreen></iframe>"},{"id":"1","title":"Happy Lazy - 遙控插座","datetime":"2017-07-04T14:49:09.053Z","summary":"每次冬天一到，就會開始趕快躲進被子裡。\n\n這時候悲劇就發生了，一旦進入被子裡面就不想再移動，此時，如果房間的電燈開關又不床邊就很麻煩。\n\n於是在學過#Arduino 的基礎之下，決定自幹一個手機遙控開","content":"每次冬天一到，就會開始趕快躲進被子裡。\n\n這時候悲劇就發生了，一旦進入被子裡面就不想再移動，此時，如果房間的電燈開關又不床邊就很麻煩。\n\n於是在學過#Arduino 的基礎之下，決定自幹一個手機遙控開關。一開始想從電燈的電源直接下手，不過在考量直接改電源一方面太過耗工，另一方面則是太沒彈性；接著就想從檯燈下手，耗工的缺點就解決了，但是還是很沒彈性，因為改完就只有檯燈可以控制；於是就決定製作一個遙控插座了。\n\n製作的的材料很簡單：\n\n1. Arduino 板子 - 整個Happy Lazy的核心\n\n2. 無線模組/藍芽模組 - 提供無線傳輸的能力 (這邊我選用藍芽模組)\n\n3. 繼電器 - 用來控制插座的開關\n\n4. 變壓器 - 用來提供Arduino板子電源\n\n其中，變壓器算是可有可無的，基於整個裝置的完整性，所以我加上了變壓器讓110V的電源降壓，同時供給Arduino板子電源，若是沒有加上變壓器，則會需要拉出另一條線提供Arduino板子電源。\n\n整個架構兜起來後，就會像圖片中那樣 (本來企圖做點美化，使其更像是一個產品，由於筆者毫無美術天分......)\n\n另外就是程式編寫的部分了，可以分成兩部分\n\n1. Arduino板子執行的程式: 聽取#藍芽 的訊號、控制繼電器模組 (即控制目標的電源開關)\n\n2. 手機端的程式: 透過藍芽送出 開/關 訊號給Arduino板子\n\n這樣就大功告成啦，以下是簡單的Demo影片，可以當個快樂的懶人了！\n\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ThhKO4otNvQ\" frameborder=\"0\" allowfullscreen></iframe>"}]},"__N_SSG":true}